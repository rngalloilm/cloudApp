# This pipeline is triggered on pushes to the 'pipeline' branch.
trigger:
- pipeline

# Use a Microsoft-hosted agent running Ubuntu.
pool:
  vmImage: 'ubuntu-latest'

# Define variables.
variables:
  # The name of your Azure Container Registry.
  azureContainerRegistry: 'crcentralusnick' 

  # The name of your Azure subscription service connection.
  azureSubscription: 'Azure DevTest subscription 1' 

  # The repository name for your Docker image within the ACR.
  imageRepository: 'image-nodeapp'

  # Path to your Dockerfile.
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'

  # A unique tag for the image, using the build ID.
  tag: '$(Build.BuildId)'

# Pipelines are organized into stages. We have one stage: Build.
stages:
- stage: Build
  displayName: 'Build and Push Stage'
  jobs:
  - job: Build
    displayName: 'Build and Push Docker image'
    steps:
    # Step 1: Login to Azure Container Registry
    # This task requires a Service Connection to your Azure Subscription.
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: '$(azureContainerRegistry)'
        
    # Step 2: Build and Push the Docker image
    - task: Docker@2
      displayName: 'Build and Push image to ACR'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        containerRegistry: '$(azureContainerRegistry)'
        tags: |
          $(tag)
          latest

    # Step 3: Publish the pipeline artifact
    # This makes the built image information available to the Release pipeline.
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop