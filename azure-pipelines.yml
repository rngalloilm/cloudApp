# azure-pipelines.yml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# This links the 'GITHUB_USER' and 'GITHUB_PAT' variables from your Library
variables:
- group: GitHub-Credentials
- name: imageRepository
  value: 'mynode-app' # The name of your image package
- name: dockerfilePath
  value: '$(Build.SourcesDirectory)/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
# This is the full image path for GitHub Container Registry
# IMPORTANT: It MUST be lowercase. GitHub enforces this.
- name: imageName
  value: 'ghcr.io/$(GITHUB_USER)/$(imageRepository)'


stages:
- stage: Build
  displayName: 'Build and Push to GHCR'
  jobs:
  - job: Build
    displayName: 'Build and Push Docker image'
    steps:
    
    # --- THIS IS THE FIX ---
    # Use a simple command-line script to log in.
    # It pipes the secret PAT into the docker login command. This is secure and direct.
    - script: |
        echo "$(GITHUB_PAT)" | docker login ghcr.io -u "$(GITHUB_USER)" --password-stdin
      displayName: 'Login to GitHub Container Registry (ghcr.io)'

    # This task now works because the agent is already logged into ghcr.io
    - task: Docker@2
      displayName: 'Build and Push image to ghcr.io'
      inputs:
        command: 'buildAndPush'
        # The repository name must be the full path.
        # Azure DevOps automatically adds the registry from the login context.
        repository: '$(imageName)'
        dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest